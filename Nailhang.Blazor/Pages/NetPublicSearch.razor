@page "/netpublicsearch"
@page "/netpublicsearch/{query}/"

@using Nailhang.Blazor.Data
@using Nailhang.Display.NetPublicSearch.Base
@using Nailhang.IndexBase.PublicApi

@inject Nailhang.Display.NetPublicSearch.Base.INetSearch netSearch;
@inject NavigationManager navigationManager;
@inject States.NetSearchState netSearchState;

<form>
    <div class="form-row">
        <div class="col">
            <label class="col-form-label">Пространство имен</label>
            <select id="select_namespace" class="form-control"
                    @bind="@netSearchState.SelectedNamespace">
                @if (netSearchState.Namespaces != null)
                    @foreach (var ns in netSearchState.Namespaces)
                    {
                        <option value=@ns>@ns</option>
                    }
            </select>
        </div>
    </div>

    <div class="form-group">
        <label class="col-form-label">Запрос</label>
        <input class="form-control" type="text" @bind-value="Query"
               @oninput="@UpdateFromText" />
    </div>

    <div class="form-group row">
        <div class="col-sm-7">
            <div class="form-check">
                <input class="form-check-input" type="checkbox"
                       id="chk_public" @bind="@netSearchState.ShowOnlyPublic" />
                <label class="form-check-label" for="chk_public">
                    Только публичные
                </label>
            </div>
        </div>

        <div class="col">
            <button class="form-control btn btn-secondary" 
                    @onclick="@OnUpdateIndex">Update search index</button>
        </div>
    </div>
</form>

<br />

@if (netSearchState.DisplayItems == null)
{
    <p><em>Загрузка результата...</em></p>
}
else
{
    <div class="interfaces-list">
        <ul>
            @{
                displayCount = 0;
            }

            @foreach (var displayResult in netSearchState.DisplayItems)
            {
                @if (!string.IsNullOrEmpty(netSearchState.SelectedNamespace))
                    if (!displayResult.Namespace.StartsWith(netSearchState.SelectedNamespace))
                        continue;

                @if (netSearchState.ShowOnlyPublic && !displayResult.IsPublic)
                    continue;

                <li>
                    <p>
                        @if (displayResult.IsPublic)
                        {
                            <span class="public_modifier_span">public</span>
                        }
                        else
                        {
                            <span class="notpublic_modifier_span">not public</span>
                        }
                        <a class="sp_class" href=@($"classview/{@Uri.EscapeDataString(displayResult.Assembly.FullName)}/{@Uri.EscapeDataString(displayResult.FullClassName)}/")>
                            @displayResult.FullClassName
                        </a>
                        <span class="sp_assembly">
                            @displayResult.Assembly.FullName.Split(',').First()
                        </span>
                    </p>
                </li>

                displayCount++;
            }
        </ul>
    </div>

    <p>Найдено: @displayCount элементов.</p>
}

@code {
    [Parameter]
    public string Query { get; set; }

    int displayCount = 0;

    async Task OnUpdateIndex()
    {
        netSearchState.DisplayItems = null;
        await Task.Run(() => netSearch.RebuildIndex());

        if (string.IsNullOrEmpty(Query))
            netSearchState.DisplayItems = new SearchItem[] { };
        else
        {
            var req = Query;
            var searchres = await Task.Run(() => netSearch.Search(Query, 50).ToArray());
            if(req == Query)
                netSearchState.DisplayItems = searchres;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        netSearchState.DisplayItems = new SearchItem[] { };
        if (!string.IsNullOrEmpty(Query))
        {
            netSearchState.DisplayItems = null;
            var search = Query;
            lastSearchReq = search;
            var searchres = await Task.Run(() => netSearch.Search(search, 50).ToArray());

            if (lastSearchReq == search)
                netSearchState.DisplayItems = searchres;
        }

        var namespaces = await Task.Run(() => netSearch.GetNamespaces()
                .SelectMany(w => w.AllNamespaces)
                .Distinct()
                .Where(w => w.Levels < 3).ToArray());

        netSearchState.Namespaces = @namespaces
            .Select(w => w.Namespace).ToArray();
    }

    string lastSearchReq;

    async Task UpdateFromText(ChangeEventArgs e)
    {
        netSearchState.DisplayItems = null;

        var containsText = (string)e.Value;
        var text = containsText.ToLower();

        if (lastSearchReq == text)
            return;

        lastSearchReq = text;
        await Task.Delay(500);
        if (lastSearchReq == text)
        {
            if (string.IsNullOrEmpty(text))
                netSearchState.DisplayItems = new SearchItem[] { };
            else
            {
                var searchres = await Task.Run(() => netSearch.Search(text, 50).ToArray());
                if (lastSearchReq == text)
                {
                    netSearchState.DisplayItems = searchres;
                    var dataEncoded = Uri.EscapeDataString(text);
                    var beforenet = navigationManager.Uri.Split("netpublicsearch")[0];
                    navigationManager.NavigateTo($"{beforenet}netpublicsearch/{dataEncoded}", false);
                }

            }
        }
    }
}
