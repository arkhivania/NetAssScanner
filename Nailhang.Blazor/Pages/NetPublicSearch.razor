@page "/netpublicsearch"
@page "/netpublicsearch/{query}/"

@using Nailhang.Blazor.Data
@using Nailhang.Display.NetPublicSearch.Base
@using Nailhang.IndexBase.PublicApi

@inject Nailhang.Display.NetPublicSearch.Base.INetSearch netSearch;
@inject NavigationManager navigationManager;

<h1>Поиск:</h1>

<div class="panel panel-default">
    <div class="panel-heading">Поиск:</div>
    <div class="panel-body">
        <input type="text" @bind-value="Query" 
               @oninput="@UpdateFromText"/>
    </div>
</div>

<br />

@if (displayItems == null)
{
    <p><em>Загрузка результата...</em></p>
}
else
{
    <div class="interfaces-list">
        <ul>
            @foreach (var displayResult in displayItems)
            {
                <li>
                    <a class="sp_class" href=@($"classview/{@Uri.EscapeDataString(displayResult.Assembly.FullName)}/{@Uri.EscapeDataString(displayResult.Class.FullName)}/")>
                        @displayResult.Class.FullName
                    </a>
                    <span class="sp_assembly">
                        @displayResult.Assembly.FullName.Split(',').First()
                    </span>
                </li>
            }
        </ul>
    </div>
}

@code {
    [Parameter]
    public string Query { get; set; }

    SearchItem[] displayItems { get; set; }

    protected override async Task OnInitializedAsync()
    {
        displayItems = new SearchItem[] { };
        if (!string.IsNullOrEmpty(Query))
        {
            var search = Query;
            lastSearchReq = search;
            var searchres = await Task.Run(() => netSearch.Search(search, 50).ToArray());

            if (lastSearchReq == search)
                displayItems = searchres;
        }
    }

    string lastSearchReq;

    async Task UpdateFromText(ChangeEventArgs e)
    {
        displayItems = null;

        var containsText = (string)e.Value;
        var text = containsText.ToLower();

        lastSearchReq = text;
        await Task.Delay(500);
        if (lastSearchReq == text)
        {
            if (string.IsNullOrEmpty(text))
                displayItems = new SearchItem[] { };
            else
            {
                var searchres = await Task.Run(() => netSearch.Search(text, 50).ToArray());
                if (lastSearchReq == text)
                {
                    displayItems = searchres;
                    var dataEncoded = Uri.EscapeDataString(text);
                    var beforenet = navigationManager.Uri.Split("netpublicsearch")[0];
                    navigationManager.NavigateTo($"{beforenet}netpublicsearch/{dataEncoded}", false);
                }
            }
        }
    }
}
