@page "/netpublicsearch"

@using Nailhang.Blazor.Data
@using Nailhang.Display.NetPublicSearch.Base

@inject Nailhang.Display.NetPublicSearch.Base.INetSearch netSearch;

<h1>Поиск:</h1>

<div class="panel panel-default">
    <div class="panel-heading">Поиск:</div>
    <div class="panel-body">
        <input type="text" @bind-value="containsText"
               @bind-value:event="oninput"
               @onkeyup="@UpdateFromText" />
    </div>
</div>

<br />

@if (displayItems == null)
{
    <p><em>Загрузка результата...</em></p>
}
else
{
    <div class="interfaces-list">
        @foreach (var ass in displayItems.OrderBy(q => q.AssemblyName)
      .GroupBy(q => new { q.AssemblyName, q.AssemblyVersion }))
        {
            <div class="assembly_desc_dev">
                <p class="descr_assembly">Сборка: @ass.Key.AssemblyName (@ass.Key.AssemblyVersion)</p>
                <br />

                @foreach (var cl in ass
                       .OrderBy(w => w.FullName)
                       .GroupBy(w => w.FullName))
                {
                    <p class="descr_class">Класс: @cl.Key</p>
                    <br />
                    <ul>
                        @foreach (var method in cl
                        .OrderBy(w => w.MethodName)
                        .ThenBy(w => w.ParametersString))
                        {
                            <li>
                                <span class="descr_result">@method.ResultType</span>
                                <span class="descr_method">@method.MethodName</span>
                                @if (method.GenericString != "")
                                {
                                    <span class="descr_method">@(method.GenericString != "" ? $"<{method.GenericString}>" : "")</span>
                                }
                                <span class="descr_parameters">(@(method.ParametersString))</span>
                            </li>
                        }
                    </ul>
                }
            </div>
        }
    </div>
}


@code {
    string containsText { get; set; } = "";
    SearchItem[] displayItems { get; set; }

    protected override void OnInitialized()
    {
        displayItems = new SearchItem[] { };
    }

    string lastSearchReq;

    async Task UpdateFromText(KeyboardEventArgs e)
    {
        displayItems = null;

        var text = containsText.ToLower();

        lastSearchReq = text;
        await Task.Delay(500);
        if (lastSearchReq == text)
        {
            if (string.IsNullOrEmpty(text))
                displayItems = new SearchItem[] { };
            else
                displayItems = await Task.Run(() => netSearch.Search(text).ToArray());
        }
    }
}
