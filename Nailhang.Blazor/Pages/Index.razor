@page "/"

@using Nailhang.Blazor.Data
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ProtectedSessionStorage ProtectedSessionStore
@inject NailhangModulesService NailhangModulesService

<h1>Модули:</h1>

@if (namespaces == null || displayModules == null)
{
    <p><em>Загрузка списка модулей...</em></p>
}
else
{
    <div class="form-row">
        <div class="col">
            <label class="col-form-label">Пространство имен</label>
            <select class="form-control" @onchange="@UpdateModules">
                @foreach (var ns in namespaces)
                {
                    <option value=@ns>@ns</option>
                }
            </select>
        </div>
    </div>

    <div class="form-check m-2">
        <input type="checkbox" class="form-check-input" id="showOnlyWD"
                @bind="@showOnlyWithDescription" @bind:after="@UpdateDisplay">
        <label class="form-check-label" for="showOnlyWD">Отображать только модули с описанием</label>
    </div>

    <p class="little-text">
        Всего модулей: @displayModules.Length
    </p>
    <div class="module-columns">
        @foreach (var m in displayModules
       .OrderBy(w => w.Module.FullName))
        {
            <div class="card m-2">
                <div class="card-body">
                    <h5 class="card-title">
                        <NavLink href=@("module/?module=" + @m.Module.FullName)>
                            @m.Module.FullName
                        </NavLink>
                    </h5>
                    <p class="card-text">@m.Module.Description</p>
                </div>
            </div>
        }
    </div>
}

@code {
    string[] namespaces;
    Nailhang.Display.Models.ModuleModel[] allModules;
    Nailhang.Display.Models.ModuleModel[] displayModules;

    bool showOnlyWithDescription;
    string selectedNamespace = "";

    protected override async Task OnInitializedAsync()
    {
        var s = await ProtectedSessionStore.GetAsync<bool>("show_w_description");
        if (s.Success)
            showOnlyWithDescription = s.Value;

        if (namespaces == null)
            namespaces = await Task.Run(() => NailhangModulesService.GetNamespaces());
        if (allModules == null)
            allModules = await Task.Run(() => NailhangModulesService.GetModules(""));

        await UpdateDisplay();
    }

    private async Task UpdateModules(ChangeEventArgs e)
    {
        this.selectedNamespace = e.Value.ToString().ToLower();
        await UpdateDisplay();
    }

    async Task UpdateDisplay()
    {
        displayModules = allModules
            .Where(w => w.Module.FullName.ToLower().StartsWith(selectedNamespace))
            .Where(q => (showOnlyWithDescription ? !string.IsNullOrEmpty(q.Module.Description) : true))
            .ToArray();
        this.StateHasChanged();
        await StoreParameters();
    }

    async Task StoreParameters()
    {
        await ProtectedSessionStore.SetAsync("show_w_description", showOnlyWithDescription);
    }
}
