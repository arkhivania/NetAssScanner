@page "/"

@using Nailhang.Blazor.Data
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject NailhangModulesService NailhangModulesService
@inject States.ModulesIndexState modulesIndexState;

<h1>Модули:</h1>

@if (namespaces == null || displayModules == null)
{
    <p><em>Загрузка списка модулей...</em></p>
}
else
{
    <div class="form-row">
        <div class="col">
            <label class="col-form-label">Пространство имен</label>
            <select class="form-control" @onchange="@UpdateModules">
                @foreach (var ns in namespaces)
                {
                    <option value=@ns>@ns</option>
                }
            </select>
        </div>
    </div>

    <div class="form-check m-2">
        <input type="checkbox" class="form-check-input" id="showOnlyWD"
           @bind="@showOnlyWithDescription" @bind:after="@UpdateDisplay">
        <label class="form-check-label" for="showOnlyWD">Отображать только модули с описанием</label>
    </div>

    <p class="little-text">
        Всего модулей: @displayModules.Length
    </p>

    <div class="container">
        <div class="card-columns">
            @foreach (var m in displayModules
           .OrderBy(w => w.Module.FullName))
            {

                <div class="card m-1">
                    <div class="card-body">
                        <h5 class="card-title">
                            <NavLink href=@("module/?module=" + @m.Module.FullName)>
                                @m.Module.FullName
                            </NavLink>
                        </h5>
                        <h6 class="card-subtitle mb-2 text-muted">Сборка: @m.Module.Assembly</h6>
                        <p class="card-text">@m.Module.Description</p>
                    </div>
                </div>

            }
        </div>
    </div>
}

@code {
    string[] namespaces;
    Nailhang.Display.Models.ModuleModel[] allModules;
    Nailhang.Display.Models.ModuleModel[] displayModules;

    bool showOnlyWithDescription;
    string selectedNamespace = "";

    protected override async Task OnInitializedAsync()
    {
        showOnlyWithDescription = modulesIndexState.ShowOnlyWithDescription;

        if (namespaces == null)
            namespaces = await Task.Run(() => NailhangModulesService.GetNamespaces());
        if (allModules == null)
            allModules = await Task.Run(() => NailhangModulesService.GetModules(""));

        UpdateDisplay();
    }

    private void UpdateModules(ChangeEventArgs e)
    {
        this.selectedNamespace = e.Value.ToString().ToLower();
        UpdateDisplay();
    }

    void UpdateDisplay()
    {
        displayModules = allModules
            .Where(w => w.Module.FullName.ToLower().StartsWith(selectedNamespace))
            .Where(q => (showOnlyWithDescription ? !string.IsNullOrEmpty(q.Module.Description) : true))
            .ToArray();
        this.StateHasChanged();
        modulesIndexState.ShowOnlyWithDescription = showOnlyWithDescription;
    }
}
