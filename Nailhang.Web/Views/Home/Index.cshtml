@model Nailhang.Web.Models.IndexModel

<script src="@Url.Content("~/Scripts/raphael-min.js")"></script>
<script src="@Url.Content("~/Scripts/dracula_graffle.js")"></script>
<script src="@Url.Content("~/Scripts/dracula_graph.js")"></script>
<script src="@Url.Content("~/Scripts/dracula_algorithms.js")"></script>

@{
    ViewBag.Title = "Home Page";
}


<div class="jumbotron">
    <h1>Nailhang</h1>
    <p class="lead">Утилита для просмотра списка модулей</p>
    @*<p><a href="http://asp.net" class="btn btn-primary btn-lg">Learn more &raquo;</a></p>*@
</div>

@using (Html.BeginForm())
{
    @Html.Hidden("formUpdate", true)
    { Html.RenderAction("RenderParameters"); }
    
    <br />
    <div>
        Пространство имен
        @Html.DropDownListFor(w => w.SelectedRoot, Model.RootNamespaces)
    </div>

    <input type="submit" value="Обновить" />
}

<div id="canvas"></div>
@*<button id="redraw" onclick="redraw();">redraw</button>
    <button id="hide_penguin" onclick="hide('penguin');">hide penguin (beta)</button>
    <button id="hide_penguin" onclick="show('penguin');">show penguin (beta)</button>*@

<div class="module-columns">
    <ul>
        @foreach (var m in Model.Modules.OrderBy(w => w.Module.FullName))
        {
            <li title="@m.Module.Description">
                @Html.ActionLink(m.Namespace, "Index", "Module", new { module = @m.Module.FullName }, null)
            </li>
        }
    </ul>
</div>

<div class="row">
    <div>
        <ul>
            @foreach (var m in Model.Modules.OrderBy(w => w.Module.FullName))
            {
                <li>
                    @{string nameSpace = m.Namespace;}
                    <h2>
                        @Html.ActionLink(@nameSpace, "Index", "Module", new { module = @m.Module.FullName }, null)
                    </h2>

                    @Html.Partial("~/Views/Module/ModuleView.cshtml", m)
                </li>
            }
        </ul>
    </div>

</div>


@*<script type="text/javascript">
    
    window.onload = function () {

        var width = $(document).width() - 100;
        var height = 800;

        var g = new Graph();

        @foreach (var m in Model.Modules)
        {
            foreach (var di in m.DependencyItems.Where(d => d.Module != null))
            {
                <text>
                g.addEdge("@m.Module.FullName", "@di.Module");
                </text>
            }                
                
        }

        var layouter = new Graph.Layout.Ordered(g, topological_sort(g));
        var renderer = new Graph.Renderer.Raphael('canvas', g, width, height);
    };

</script>*@







