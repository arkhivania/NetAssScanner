@model Nailhang.Web.Models.ModuleModel
@using Microsoft.AspNetCore.Http
@using Newtonsoft.Json;
@using Nailhang.Web


<h6>@Model.Module.Description</h6>

<br />

@{var displaySettings = new Nailhang.Web.Models.DisplaySettings();}

@if (displaySettings.ShowInterfaces && Model.Module.Interfaces != null && Model.Module.Interfaces.Length > 0)
{
    <p>Интерфейсы:</p>
    <ul>
        @foreach (var i in Model.Module.Interfaces)
        {
            <li>
                <p class="interface-name">
                    @i.TypeReference.FullName.GetClassName()
                </p>
                @if (!string.IsNullOrEmpty(i.Description))
                {
                    <p class="interface-description">
                        @i.Description
                    </p>
                }

                @if (i.Methods != null && i.Methods.Length > 0)
                {
                    <ul>
                        @foreach (var meth in i.Methods)
                        {
                            <li>
                                <p class="method-name">@meth.MethodString</p>
                                @if (meth.InvocationRestriction != null)
                                {
                                    <p class="method-restriction">@meth.InvocationRestriction.Value</p>
                                }
                            </li>
                        }
                    </ul>
                }
            </li>
        }
    </ul>

    <br />
}



@if (displaySettings.ShowObjects && Model.Module.Objects != null && Model.Module.Objects.Length > 0)
{
    <p><i>Объекты:</i></p>
    <ul>
        @foreach (var i in Model.Module.Objects.OrderBy(w => w.TypeReference.FullName))
        {
            <li>
                <p>
                    @i.TypeReference.FullName.GetClassName()
                </p>
                @if (!string.IsNullOrEmpty(i.Description))
                {
                    <p class="interface-description">
                        @i.Description
                    </p>
                }
            </li>
        }
    </ul>

    <br />
}



@if (displaySettings.ShowDependencies && Model.DependencyItems != null && Model.DependencyItems.Length > 0)
{
    <p><i>Зависимости:</i></p>
    <ul>
        @foreach (var nd in Model.DependencyItems.OrderBy(w => w.Name))
        {
            <li>
                @if (string.IsNullOrEmpty(nd.Module))
                {
                    <p>@nd.Name</p>
                }else
                {
                    <p>
                        @Html.ActionLink(nd.Name, "Index", "Module", new { module = nd.Module }, null)
                    </p>
                }
            </li>
        }
    </ul>    
}

@if (displaySettings.ShowDependencies && Model.DependencyItems != null && Model.ItemsWithThisDependency.Length > 0)
{
<br />
<p><i>Модули, которые зависят от: @Model.Namespace</i></p>
<ul>
    @foreach (var nd in Model.ItemsWithThisDependency.OrderBy(w => w.Name))
    {
        <li>
            @if (string.IsNullOrEmpty(nd.Module))
            {
                <p>@nd.Name</p>
            }
            else
            {
                <p>
                    @Html.ActionLink(nd.Name, "Index", "Module", new { module = nd.Module }, null)
                </p>
            }
        </li>
    }
</ul>
}

@if (displaySettings.ShowBinds && Model.Module.ModuleBinds != null && Model.Module.ModuleBinds.Length > 0)
{
    <br />
    <p><i>Модуль привязывает:</i></p>
    <ul>
        @foreach (var nd in Model.Module.ModuleBinds.OrderBy(w => w.FullName))
        {
            <li>
                <p>
                    @Html.ActionLink(nd.FullName, "Index", "Interface", new { interfaceHash = nd.FullName.ToMD5() }, null)
                </p>
            </li>
        }
    </ul>
}


@if (Model.Module.FullName != Model.Namespace)
{
    <p class="little-text">
        Класс модуля: @Model.Module.FullName
        <br/>
        Сборка: @Model.Module.Assembly
    </p>
}
else
{
    <p class="little-text">
        Сборка: @Model.Module.Assembly
    </p>
}

<hr />